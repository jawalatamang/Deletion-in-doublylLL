class Node:
    def __init__(self,data):
        self.data = data
        self.nlink = None
        self.plink = None
        
class doublyLL:
    def __init__(self):
        self.head = None
        
    def print_LL(self):
        if self.head is None:
            print("Linked List is empty ! ")
        else:
            n = self.head
            while n.nlink is not None:
                n = n.nlink
            while n is not None:
                print(n.data)
                n = n.plink
                
    def insert_empty(self,data):
        if self.head is None:
            new_node = Node(data)
            self.head = new_node
        else:
            print("Linked list is not empty !")
            
    def add_begin(self,data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            new_node.nlink = self.head
            self.head.plink = new_node
            self.head = new_node
            
    def delete_begin(self):
        if self.head is None:
            print("DLL is empty can't delete !")
            return
        if self.head.nlink is None:
            self.head = None
            print("DLL is empty after deleting the node !")
        else:
            self.head = self.head.nlink
            self.head.plink = None
            
    def delete_end(self):
        if self.head is None:
            print("DLL is empty so can't delete")
            return
        else:
            n = self.head
            while n.nlink is not None:
                n = n.nlink
            n.plink.nlink = None
     
    def delete_by_value(self,x):
        if self.head is None:
            print("DLL is empty so can't delete")
            return
        if self.head.nlink is None:
            if x == self.head.data:
                self.head = None
            else:
                print("x is not present in DLL")
                return
            if self.head.data == x:
                self.head = self.head.nlink
                self.head.plink = None
                return
            n = self.head
            while n.nlink is not None:
                if x == n.data:
                    break
                n = n.nlink
            if n.nlink is not None:
                n.nlink.plink = n.plink
                n.plink.nlink = n.nlink
            else:
                if n.data == x:
                    n.plink.nlink = None
                else:
                    print("x is not present in DLL")           
    
  